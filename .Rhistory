draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
P = matrix(c(.6, .75, .4, .25), nrow=2, ncol=2)
real_pi = c(15/23, 8/23)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
sim_p11
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 10000, 2, init="pi", pi=real_pi)
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
sim_pi12
sim_pi2
source('~/Google Drive/Spring 2019/markov/Untitled.R')
# 10000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
library(ggplot2)
library(ggplot2)
uniform = function(){
return(runif(1))
}
library(ggplot2)
uniform = function(){
return(runif(1))
}
draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
P = matrix(c(.6, .75, .4, .25), nrow=2, ncol=2)
real_pi = c(15/23, 8/23)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
# 10000 Chains, 1 step each, init drawn from $\pi$
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 10900, 100, init="1")
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 10000, 100, init="1")
sim_pi1
# 10000 Chains, 1 step each, init drawn from $\pi$
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
sim_pi2
seq(2,2)
.25 + .75*exp(-4/3 * .013)
.25 + .75*exp((-4/3) * .013)
.25 + .75*exp((-4/3) * .015)
same <- function(val){
return(.25 + .75*exp((-4/3) * val))
}
dif <- function(val){
return(.25 - .25*exp((-4/3) * val))
}
dif(0.29+0.14)
same <- function(val){
return .25*(.25 + .75*exp((-4/3) * val))
}
dif <- function(val){
return .25*(.25 - .25*exp((-4/3) * val))
}
same <- function(val){
return (.25*(.25 + .75*exp((-4/3) * val)))
}
dif <- function(val){
return (.25*(.25 - .25*exp((-4/3) * val)))
}
same(.013)
same(.015)
dif(0.029+0.14)
dif(0.029+0.014)
.0035*.247*.246
3.18 * 10^-7 + 4.63*10^-9 + 4.63*10^-9
3.18 * 10^-7 + 4.63*10^-9 + 4.63*10^-9 + .000213
.000213 * .01456^4 * 2.45*10^-12
c <- (61.92, 36.29, 12.91)
d <- c(61.92, 36.29, 12.91)
chisq.test(d)
library(ape)
tree <- rtree(n = 20)
install.packages('ape')
library(ape)
tree <- rtree(n = 20)
plot(tree, edge.width = 2)
tree
setwd("~/Projects/mpfm2/data/test")
disp <- read.csv('dispersal')
disp <- read.csv('dispersal.csv')
pops <- read.csv('populations.csv')
library(ggplot2)
str(pops)
ggplot(pops, aes(generation, w_mean)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=population)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, color=population)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, prop_of_k, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, eff_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, effective_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
setwd("~/Projects/mpfm2/data/more_init")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, effective_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
library(ggplot2)
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
np = 15
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
library(network)
library(sna)
library(ggnet)
library(ggplot2)
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=4, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
net = rgraph(10, mode = "graph", tprob = 0.5)
net = network(net, directed = FALSE)
np = 15
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
locations = data.frame(matrix(nrow=np, ncol=2))
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
summary(lm(y ~ x, data=cars))$data
str(cars)
iris
str(iris)
summary(lm(Sepal.Length ~ Sepal.Width, data=iris))
a = https://thehill.com/blogs/blog-briefing-room/news/436631-elon-musk-drops-surprise-rap-single-about-harambe
a = summary(lm(Sepal.Length ~ Sepal.Width, data=iris))
a$p
a
a = (lm(Sepal.Length ~ Sepal.Width, data=iris))
a
a$model
model = lm(iris$Petal.Width ~ iris$Petal.Length)
model
str(model)
model = summary(lm(iris$Petal.Width ~ iris$Petal.Length))
str(model)
response = iris$Petal.Length
while (model$p_value > 0.05) {
response = log(response)
model = lm(data$y ~ response)
f = summary(model)$fstatistic
p = pf(f[1],f[2],f[3],lower.tail=F)
}
response = iris$Petal.Length
p = 1
while (p > 0.05) {
response = log(response)
model = lm(data$y ~ response)
f = summary(model)$fstatistic
p = pf(f[1],f[2],f[3],lower.tail=F)
}
response = iris$Petal.Length
p = 1
while (p > 0.05) {
response = log(response)
model = lm(iris$Petal.Width ~ response)
f = summary(model)$fstatistic
p = pf(f[1],f[2],f[3],lower.tail=F)
}
p
response = iris$Petal.Length
p = 1
log_ct = 0
while (p > 0.05) {
response = log(response)
model = lm(iris$Petal.Width ~ response)
f = summary(model)$fstatistic
p = pf(f[1],f[2],f[3],lower.tail=F)
log_ct = log_ct+1
}
log_ct
?pf
response = iris$Petal.Width
p = 1
log_ct = 0
while (p > 0.05) {
response = log(response)
model = lm(response ~ iris$Petal.Length)
f = summary(model)$fstatistic
p = pf(f[1],f[2],f[3], lower.tail=F)
log_ct = log_ct+1
}
log_ct
ln
?liog
?log
x = c(5/sqrt(2), -5/(2*sqrt(2)), -27.5/(2*sqrt(3)))
y = c(10/sqrt(2), -10/sqrt(2), -20/sqrt(3))
plot(x,y)
setwd("~/Projects/lichen_genomes")
intron_len = read.csv('intron_len.csv')
repro_type = read.csv('repro_type.csv')
str(intron_len)
intron_len = read.csv('intron_len.csv')
repro_type = read.csv('repro_type.csv')
merge(intron_len, repro_type, by="Species")
merge(intron_len, repro_type, by="Species")[is.na()]
merge(intron_len, repro_type, by="Species")
intron_len
intron_len = read.csv('intron_len.csv')
intron_len
intron_len = read.csv('intron_len.csv')
intron_len
merge(intron_len, repro_type, by="Species")
data = merge(intron_len, repro_type, by="Species")
data[species, "Reproduction.Mode", "Total.Number.of.Introns"]
data["species", "Reproduction.Mode", "Total.Number.of.Introns"]
cols =c("species", "Reproduction.Mode", "Total.Number.of.Introns")
data[cols,]
data = merge(intron_len, repro_type, by="Species")
cols =c("Species", "Reproduction.Mode", "Total.Number.of.Introns")
data[cols,]
data
data[,cols]
the_good_shit = data[,cols]
the_actual_data = data[,cols]
the_actual_data$Reproduction.Mode = as.numeric(levels(the_actual_data$Reproduction.Mode))[the_actual_data$Reproduction.Mode ]
the_actual_data$Reproduction.Mode
as.numeric(levels(the_actual_data$Reproduction.Mode))[the_actual_data$Reproduction.Mode]
the_actual_data$Reproduction.Mode =
as.numeric(levels(the_actual_data$Reproduction.Mode))
the_actual_data$Reproduction.Mode =
as.numeric(levels(the_actual_data$Reproduction.Mode))[,]
the_actual_data$Reproduction.Mode
data = merge(intron_len, repro_type, by="Species")
cols =c("Species", "Reproduction.Mode", "Total.Number.of.Introns")
the_actual_data = data[,cols]
the_actual_data$Reproduction.Mode
the_actual_data$Reproduction.Mode =
as.numeric(levels(the_actual_data$Reproduction.Mode))
the_actual_data$Reproduction.Mode =
as.numeric(levels(the_actual_data$Reproduction.Mode))
cols =c("Species", "Reproduction.Mode", "Total.Number.of.Introns")
the_actual_data = data[,cols]
as.numeric(levels(the_actual_data$Reproduction.Mode))
data = merge(intron_len, repro_type, by="Species")
cols =c("Species", "Reproduction.Mode", "Total.Number.of.Introns")
the_actual_data = data[,cols]
as.numeric(levels(the_actual_data$Reproduction.Mode))
data = merge(intron_len, repro_type, by="Species")
cols =c("Species", "Reproduction.Mode", "Total.Number.of.Introns")
the_actual_data = data[,cols]
the_actual_data
the_actual_data = data[,cols]
the_actual_data
levels(the_actual_data$Reproduction.Mode)
as.numeric(levels(the_actual_data$Reproduction.Mode))
levels(the_actual_data$Reproduction.Mode)
the_actual_data$
as.numeric(levels(the_actual_data$Reproduction.Mode))
levels(the_actual_data$Reproduction.Mode)
the_actual_data$Reproduction.Mode
as.factor(the_actual_data$Reproduction.Mode)
the_actual_data$repro = as.factor(the_actual_data$Reproduction.Mode)
the_actual_data
the_actual_data$repro = as.numeric(as.factor(the_actual_data$Reproduction.Mode))
the_actual_data
?write.csv
write.csv(the_actual_data, file="char_matr.csv")
?write.nexus.data
library(phytools)
library(ape)
?write.nexus.data
write.table(the_actual_data, file="char_matr.csv", sep="\t")
intron_len = read.csv('intron_len.csv')
repro_type = read.csv('repro_type.csv')
write.table(repro_type[,c("Species", "Reproduction.Mode")], file="repo_data.txt", sep="\t")
repro_type
cols_rep = c("Species", "Reproduction.Mode")
write.table(repro_type[,cols_rep], file="repo_data.txt", sep="\t")
intron_len = read.csv('intron_len.csv')
repro_type = read.csv('repro_type.csv')
str(repro_type)
repro_type = read.csv('repro_type.csv')
str(repro_type)
intron_len = read.csv('intron_len.csv')
str(intron_len)
write.table(intron_len[,cols_rep], file="intron_len.txt", sep="\t")
cols_rep = c("Species", "Total.Number.of.Introns")
write.table(intron_len[,cols_rep], file="intron_len.txt", sep="\t")
repro_type = read.csv('repro_type.csv')
str(repro_type)
repro_type = read.csv('repro_type.csv')
repro_type
repro_type$repro = as.numeric(as.factor(repro_type$Reproduction.Mode))
repro_type
cols_rep = c("Species", "repro")
write.table(repro_type[,cols_rep], file="repo_type.txt", sep="\t")
write.table(repro_type[,cols_rep], file="repo_type.txt", sep="\t")
write.table(repro_type[,cols_rep], file="repo_type.txt", sep="\t")
