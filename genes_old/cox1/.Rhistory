init_condition = 1
}
else if (pi) {
init_condition = draw_from_row(pi)
}
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
df[line,] <- c(chain, step, now)
line = line+1
}
}
#ggplot(df, aes(step, state, group=id)) + geom_point(alpha=0.1) + geom_line(alpha=0.1)
prop1 = nrow(subset(df, state==1 & step == num_steps))/(num_chains)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 1000, init="1")
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 100, 100, init="1")
sim_pi1
real_pi
# 1000 Chains, 100 steps each, init drawn from \pi
sim_pi2 = do_sim(P2, 1000, 100, init="pi", pi=real_pi)
# 1000 Chains, 100 steps each, init drawn from \pi
sim_pi2 = do_sim(P2, 100, 100, init="pi", pi=real_pi)
else if (pi != NA) {
init_condition = draw_from_row(pi)
}
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
df = data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) = c("id", "step", "state")
line = 1
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
df[line,] <- c(chain, step, now)
line = line+1
}
}
#ggplot(df, aes(step, state, group=id)) + geom_point(alpha=0.1) + geom_line(alpha=0.1)
prop1 = nrow(subset(df, state==1 & step == num_steps))/(num_chains)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
# 1000 Chains, 100 steps each, init drawn from \pi
sim_pi2 = do_sim(P2, 100, 100, init="pi", pi=real_pi)
sim_pi2
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
x = c(0,1,2,3)
subset(x, 3)
prop1 = sum(end_states == 1)/length(end_states)
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
# 1000 Chains, 100 steps each, init drawn from \pi
sim_pi2 = do_sim(P2, 1000, 100, init="pi", pi=real_pi)
sim_pi2
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 1000, 1, init="pi", pi=real_pi)
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 1000, 2, init="pi", pi=real_pi)
sim_pi2
sim_pi2
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 10000, 2, init="pi", pi=real_pi)
sim_pi2
sim_pi2
sim_pi2
sim_pi2
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 10000, 2, init="pi", pi=real_pi)
sim_pi2
sim_pi2
sim_pi2
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
P = matrix(c(.6, .75, .4, .25), nrow=2, ncol=2)
real_pi = c(15/23, 8/23)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
uniform = function(){
return(runif(1))
}
draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
P = matrix(c(.6, .75, .4, .25), nrow=2, ncol=2)
real_pi = c(15/23, 8/23)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
sim_p11
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P2, 10000, 2, init="pi", pi=real_pi)
# 1000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
sim_pi12
sim_pi2
source('~/Google Drive/Spring 2019/markov/Untitled.R')
# 10000 Chains, 1 step each, init drawn from \pi
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
library(ggplot2)
library(ggplot2)
uniform = function(){
return(runif(1))
}
library(ggplot2)
uniform = function(){
return(runif(1))
}
draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
draw_from_row = function(r){
draw = uniform()
s = 0
ind = 1
for (val in r){
s = s + val
if (s > draw){
return(ind)
}
else{
ind = ind + 1
}
}
return (r[length(r)])
}
do_sim = function(P, num_chains, num_steps, init="1", pi=NA){
if (init == "1"){
init_condition = 1
}
else if (!is.na(pi)) {
init_condition = draw_from_row(pi)
}
end_states = rep(-1, num_chains)
for (chain in seq(1, num_chains)){
states = rep(-1, num_steps)
states[1] = init_condition
for (step in seq(2, num_steps)){
prev = states[step-1]
r = P[prev,]
now = draw_from_row(r)
states[step] = now
# at the end
if (step == num_steps){
end_states[chain] = now
}
}
}
prop1 = sum(end_states == 1)/length(end_states)
prop2 = 1.0 - prop1
sim_pi = c(prop1, prop2)
return(sim_pi)
}
P = matrix(c(.6, .75, .4, .25), nrow=2, ncol=2)
real_pi = c(15/23, 8/23)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 1000, 100, init="1")
# 10000 Chains, 1 step each, init drawn from $\pi$
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 10900, 100, init="1")
# 1000 Chains, 100 steps each, init 1
sim_pi1 = do_sim(P, 10000, 100, init="1")
sim_pi1
# 10000 Chains, 1 step each, init drawn from $\pi$
sim_pi2 = do_sim(P, 10000, 2, init="pi", pi=real_pi)
sim_pi2
seq(2,2)
.25 + .75*exp(-4/3 * .013)
.25 + .75*exp((-4/3) * .013)
.25 + .75*exp((-4/3) * .015)
same <- function(val){
return(.25 + .75*exp((-4/3) * val))
}
dif <- function(val){
return(.25 - .25*exp((-4/3) * val))
}
dif(0.29+0.14)
same <- function(val){
return .25*(.25 + .75*exp((-4/3) * val))
}
dif <- function(val){
return .25*(.25 - .25*exp((-4/3) * val))
}
same <- function(val){
return (.25*(.25 + .75*exp((-4/3) * val)))
}
dif <- function(val){
return (.25*(.25 - .25*exp((-4/3) * val)))
}
same(.013)
same(.015)
dif(0.029+0.14)
dif(0.029+0.014)
.0035*.247*.246
3.18 * 10^-7 + 4.63*10^-9 + 4.63*10^-9
3.18 * 10^-7 + 4.63*10^-9 + 4.63*10^-9 + .000213
.000213 * .01456^4 * 2.45*10^-12
c <- (61.92, 36.29, 12.91)
d <- c(61.92, 36.29, 12.91)
chisq.test(d)
library(ape)
tree <- rtree(n = 20)
install.packages('ape')
library(ape)
tree <- rtree(n = 20)
plot(tree, edge.width = 2)
tree
setwd("~/Projects/mpfm2/data/test")
disp <- read.csv('dispersal')
disp <- read.csv('dispersal.csv')
pops <- read.csv('populations.csv')
library(ggplot2)
str(pops)
ggplot(pops, aes(generation, w_mean)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=population)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, color=population)) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, prop_of_k, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, eff_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, effective_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
setwd("~/Projects/mpfm2/data/more_init")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, effective_migration, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
library(ggplot2)
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
setwd("~/Projects/mpfm2/data/test")
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
pops <- read.csv('populations.csv')
disp <- read.csv('dispersal.csv')
ggplot(pops, aes(generation, w_mean, group=as.factor(population), color=as.factor(population))) + geom_point() + geom_line()
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
np = 15
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
library(network)
library(sna)
library(ggnet)
library(ggplot2)
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=4, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
net = rgraph(10, mode = "graph", tprob = 0.5)
net = network(net, directed = FALSE)
np = 15
locations = data.frame(matrix(nrow=np, ncol=2))
weightmap = data.frame(matrix(nrow=np, ncol=np))
weight = 3.0
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
locations = data.frame(matrix(nrow=np, ncol=2))
for (i in seq(1,np)){
for (j in seq(1,2)){
locations[i,j] = runif(1)
}
}
for (i in seq(1,np)){
for (j in seq(1,np)){
x1 = locations[i,1]
y1 = locations[i,2]
x2 = locations[j,1]
y2 = locations[j,2]
deltaX = x2 -x1
deltaY = y2 -y1
dist = sqrt((deltaY*deltaY)+(deltaX*deltaX))
weightmap[i,j] = exp(-1*weight*dist)
}
}
weight = network(weightmap,
matrix.type = "adjacency",
ignore.eval = FALSE,
names.eval = "weights")
weight %v% "x" = locations[, 1]
weight %v% "y" = locations[, 2]
ggnet2(weight, mode = c("x", "y"), size=6, color="#4561a8", edge.size = "weights", edge.alpha = 0.2) + xlim(0,1) + ylim(0,1) + theme(axis.line = element_line(size=0.3)) + coord_fixed()
library(phytools)
library(phytools)
cox1.tree = read.tree("cox1.nexus.con.tre")
setwd("~/Projects/lichen_genomes/genes/cox1")
cox1.tree = read.tree("cox1.nexus.con.tre")
?read.tree
cox1.tree = read.tree("cox1.nexus.con.tre")
fn <- function(y,x) (x*y-y^2)/x^2
soln <- runge.kutta(fn,2,seq(1,3,by=1/128))
## exact solution
exact <- seq(1,3,by=1/128)/(0.5+log(seq(1,3,by=1/128)))
rbind(soln, exact)
fn <- function(y,x) (x*y-y^2)/x^2
soln <- runge.kutta(fn,2,seq(1,3,by=1/128))
